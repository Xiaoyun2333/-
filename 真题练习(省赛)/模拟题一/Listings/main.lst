C51 COMPILER V9.60.0.0   MAIN                                                              04/04/2023 18:34:29 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include<STC15.H>
   2          #include<INTRINS.H>
   3          #include<base.h>
   4          #include<STDIO.H>
   5          
   6          unsigned char smg_buf[] = {10,10,10,10,10,10,10,10};
   7          unsigned char led_buf[] = {0,0,0,0,0,0,0,0};
   8          unsigned char point[] = {0,0,0,0,0,0,0,0};
   9          unsigned char uart_send[20];
  10          
  11          unsigned char key_count = 0;
  12          unsigned char smg_count = 0;
  13          unsigned char uart_count = 0;
  14          unsigned char pos_count = 0;
  15          
  16          unsigned char key_vla,key_old,key_down,key_up;
  17          
  18          unsigned char smg_mode = 0;
  19          
  20          unsigned char distance = 0;
  21          unsigned char distance_set = 30;
  22          
  23          unsigned char ms400_count = 0;
  24          unsigned char led_flash = 0;
  25          
  26          void key_proc();
  27          void smg_proc();
  28          void led_proc();
  29          void uart_proc();
  30          
  31          void timer0_init();
  32          void timer0_service();
  33          
  34          void uart_init();
  35          void uart_service();
  36          
  37          void main()
  38          {
  39   1          init();
  40   1          timer0_init();
  41   1        uart_init();
  42   1          while (1)
  43   1          {
  44   2              key_proc();
  45   2              smg_proc();
  46   2              led_proc();
  47   2              uart_proc();
  48   2          }   
  49   1      }
  50          
  51          void key_proc()
  52          {
  53   1          if(key_count) return;
  54   1          key_count = 1;
C51 COMPILER V9.60.0.0   MAIN                                                              04/04/2023 18:34:29 PAGE 2   

  55   1      
  56   1          key_vla = key_read();
  57   1          key_down = key_vla & (key_vla ^ key_old);
  58   1          key_up = ~key_vla & (key_vla ^ key_old);
  59   1          key_old = key_vla;
  60   1      
  61   1          switch (key_up)
  62   1          {
  63   2              case 4:
  64   2                  if(++smg_mode == 2 ) smg_mode = 0;
  65   2              break;
  66   2              case 8:
  67   2                  if(smg_mode == 0) distance_set = distance;
  68   2              break;
  69   2              case 9:
  70   2                  sprintf(uart_send,"Distance:%dcm\r\n",distance);
  71   2                  uart_send_string(uart_send);
  72   2              break;
  73   2              case 12:
  74   2                  if(smg_mode == 1) 
  75   2                  {
  76   3                      if((distance_set <= 255) && (distance_set > 245)) distance_set = 255;
  77   3                      else distance_set += 10;
  78   3                  }
  79   2              break;
  80   2              case 16:
  81   2                  if(smg_mode == 1)
  82   2                  {
  83   3                      if(distance_set < 10) distance_set = 0;
  84   3                      else distance_set -= 10;
  85   3                  }
  86   2              break;
  87   2          }
  88   1      }
  89          void smg_proc()
  90          {
  91   1          if(smg_count) return;
  92   1          smg_count = 1;
  93   1      
  94   1          distance = wave_data();
  95   1      
  96   1          switch (smg_mode)
  97   1          {
  98   2              case 0:
  99   2                  smg_buf[0] = 11;
 100   2                  smg_buf[1] = 1;
 101   2                  if((distance / 100) == 0) smg_buf[5] = 10;
 102   2                  else smg_buf[5] = distance / 100;
 103   2                  if((distance / 10 % 10) == 0)
 104   2                  {
 105   3                      if((distance / 100) == 0) smg_buf[6] = 10;
 106   3                      else smg_buf[6] = 0;
 107   3                  }
 108   2                  else smg_buf[6] = distance / 10 % 10;
 109   2                  smg_buf[7] = distance % 10;
 110   2              break;
 111   2              case 1:
 112   2                  smg_buf[0] = 11;
 113   2                  smg_buf[1] = 2;
 114   2                  if((distance_set / 100) == 0) smg_buf[5] = 10;
 115   2                  else smg_buf[5] = distance_set / 100;
 116   2                  if((distance_set / 10 % 10) == 0)
C51 COMPILER V9.60.0.0   MAIN                                                              04/04/2023 18:34:29 PAGE 3   

 117   2                  {
 118   3                      if((distance_set / 100) == 0) smg_buf[6] = 10;
 119   3                      else smg_buf[6] = 0;
 120   3                  }
 121   2                  else smg_buf[6] = distance_set / 10 % 10;
 122   2                  smg_buf[7] = distance_set % 10;
 123   2              break;
 124   2          }
 125   1      }
 126          void led_proc()
 127          {
 128   1          switch (smg_mode)
 129   1          {
 130   2          case 0:
 131   2              led_buf[0] = 1;
 132   2              led_buf[1] = 0;
 133   2              break;
 134   2          case 1:
 135   2              led_buf[1] = 1;
 136   2              led_buf[0] = 0;
 137   2              break;
 138   2          }
 139   1          if(distance > distance_set) led_flash = 1;
 140   1          else led_flash = 0;
 141   1      
 142   1          if(ms400_count < 200) led_buf[2] = 0;
 143   1          else led_buf[2] = 1;
 144   1      
 145   1      }
 146          void uart_proc()
 147          {
 148   1          if(uart_count) return;
 149   1          uart_count = 1;
 150   1      }
 151          
 152          void timer0_init()
 153          {
 154   1          AUXR &= 0x7F;   //定时器时钟12T模式
 155   1        TMOD &= 0xF0;   //设置定时器模式
 156   1        TL0 = 0x18;   //设置定时初始值
 157   1        TH0 = 0xFC;   //设置定时初始值
 158   1        TF0 = 0;    //清除TF0标志
 159   1        TR0 = 1;    //定时器0开始计时
 160   1      
 161   1          ET0 = 1;
 162   1          EA = 1;
 163   1      }
 164          void uart_init()
 165          {
 166   1          SCON = 0x50;    //8位数据,可变波特率
 167   1        AUXR |= 0x01;   //串口1选择定时器2为波特率发生器
 168   1        AUXR |= 0x04;   //定时器时钟1T模式
 169   1        T2L = 0xC7;   //设置定时初始值
 170   1        T2H = 0xFE;   //设置定时初始值
 171   1        AUXR |= 0x10;   //定时器2开始计时   
 172   1      
 173   1          ES = 1;
 174   1          EA = 1;
 175   1      }
 176          void timer0_service() interrupt 1
 177          {
 178   1          if(++key_count == 10) key_count = 0;
C51 COMPILER V9.60.0.0   MAIN                                                              04/04/2023 18:34:29 PAGE 4   

 179   1          if(++smg_count == 500) smg_count = 0;
 180   1          if(++uart_count == 200) uart_count = 0;
 181   1          if(++pos_count == 8) pos_count = 0;
 182   1          if(led_flash)
 183   1          {
 184   2              if(++ms400_count == 400) ms400_count = 0;
 185   2          }
 186   1          else ms400_count = 0;
 187   1          led_show(pos_count,led_buf[pos_count]);
 188   1          smg_show(pos_count,smg_buf[pos_count],point[pos_count]);
 189   1      }
 190          void Uart1Server() interrupt 4
 191          {
 192   1        // if(RI == 1 && uart_recv_index < 20) //串口接收数据
 193   1        // {
 194   1        //  uart_recv[uart_recv_index] = SBUF;
 195   1        //  uart_recv_index++;
 196   1        //  RI = 0;
 197   1        // }
 198   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    607    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     57    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
