C51 COMPILER V9.60.0.0   MIAN                                                              03/29/2023 10:32:11 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MIAN
OBJECT MODULE PLACED IN .\Objects\mian.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE mian.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\mian
                    -.lst) TABS(2) OBJECT(.\Objects\mian.obj)

line level    source

   1          #include<STC15.H>
   2          #include<INTRINS.H>
   3          
   4          #include<iic.h>
   5          #include<led.h>
   6          #include<smg.h>
   7          #include<key.h>
   8          
   9          unsigned char smg_buf[] = {10,10,10,10,10,10,10,10};
  10          unsigned char smg_point[] = {0,0,0,0,0,0,0,0};
  11          unsigned char led_buf[] = {0,0,0,0,0,0,0,0};
  12          
  13          unsigned char key_count = 0;
  14          unsigned char smg_count = 0;
  15          unsigned char smg_bit_count  = 0;
  16          unsigned int timer0_count = 0;
  17          unsigned int ne555_f = 0;
  18          
  19          unsigned char key_val,key_up,key_down,key_old;
  20          
  21          bit led_mode = 0;
  22          bit smg_value = 0;
  23          bit smg_mode = 0;
  24          bit dac_mode = 0;
  25          
  26          unsigned int da = 0;
  27          
  28          void init();
  29          void timer0_init();
  30          void timer0_service();
  31          void timer1_init();
  32          void timer1_service();
  33          
  34          void key_proc();
  35          void smg_proc();
  36          void led_proc();
  37          void other_proc();
  38          
  39          void Delay1000ms()    //@12.000MHz
  40          {
  41   1        unsigned char i, j, k;
  42   1      
  43   1        _nop_();
  44   1        _nop_();
  45   1        i = 46;
  46   1        j = 153;
  47   1        k = 245;
  48   1        do
  49   1        {
  50   2          do
  51   2          {
  52   3            while (--k);
  53   3          } while (--j);
  54   2        } while (--i);
C51 COMPILER V9.60.0.0   MIAN                                                              03/29/2023 10:32:11 PAGE 2   

  55   1      }
  56          
  57          void main()
  58          {
  59   1          init();
  60   1          timer0_init();
  61   1          timer1_init();
  62   1          Delay1000ms();
  63   1          while(1)
  64   1          {
  65   2              key_proc();
  66   2              smg_proc();
  67   2              led_proc();
  68   2              other_proc();
  69   2          } 
  70   1      }
  71          
  72          void init()
  73          {
  74   1          P2 = P2 & 0x1f | 0x80;
  75   1          P0 = 0xff;
  76   1          P2 &= 0x1f;
  77   1      
  78   1          P2 = P2 & 0x1f | 0xa0;
  79   1          P0 = 0x00;
  80   1          P2 &= 0x1f;
  81   1      }
  82          void timer0_init()
  83          {
  84   1          AUXR &= 0x7F; 
  85   1          TMOD |= 0x05;
  86   1          TL0 = 0x00;   //设置定时初始值
  87   1        TH0 = 0x00;   //设置定时初始值
  88   1          TF0 = 0;
  89   1          TR0 = 1;
  90   1      }
  91          void timer1_init()    //1毫秒@12.000MHz
  92          {
  93   1        AUXR |= 0x40;   //定时器时钟1T模式
  94   1        TMOD &= 0x0F;   //设置定时器模式
  95   1        TL1 = 0x20;   //设置定时初始值
  96   1        TH1 = 0xD1;   //设置定时初始值
  97   1        TF1 = 0;    //清除TF1标志
  98   1        TR1 = 1;    //定时器1开始计时
  99   1      
 100   1          ET1 = 1;
 101   1          EA = 1;
 102   1      }
 103          void timer1_service() interrupt 3
 104          {
 105   1          if(++key_count == 10) key_count = 0;
 106   1          if(++smg_count == 500) smg_count = 0;
 107   1          if(++smg_bit_count == 8) smg_bit_count = 0;
 108   1          if(++timer0_count == 1000)
 109   1          {
 110   2              ne555_f = TH0 << 8 | TL0;
 111   2              timer0_count = 0;
 112   2              TL0 = 0x00;   //设置定时初始值
 113   2            TH0 = 0x00;   //设置定时初始值
 114   2          }
 115   1          led_show(smg_bit_count,led_buf[smg_bit_count]);
 116   1          smg_show(smg_bit_count,smg_buf[smg_bit_count],smg_point[smg_bit_count]);
C51 COMPILER V9.60.0.0   MIAN                                                              03/29/2023 10:32:11 PAGE 3   

 117   1      }
 118          void key_proc()
 119          {
 120   1          if(key_count) return;
 121   1          key_count = 1;
 122   1      
 123   1          key_val = key_read();
 124   1          key_down = key_val & (key_val ^ key_old);
 125   1          key_up = ~key_val & (key_val ^ key_old);
 126   1          key_old = key_val;
 127   1      
 128   1          switch(key_down)
 129   1          {
 130   2              case 4:
 131   2                  smg_mode = ~smg_mode;
 132   2                  break;
 133   2              case 5:
 134   2                  dac_mode = ~dac_mode;
 135   2                  break;
 136   2              case 6:
 137   2                  led_mode = ~led_mode;
 138   2                  break;
 139   2              case 7:
 140   2                  smg_value = ~smg_value;
 141   2                  break;
 142   2          }
 143   1      }
 144          void smg_proc()
 145          {
 146   1          if(smg_count) return;
 147   1          smg_count = 1;
 148   1      
 149   1          if(~smg_value)
 150   1          {
 151   2              if(~smg_mode)
 152   2              {
 153   3                  smg_buf[0] = 11;
 154   3                  if(ne555_f > 9999) smg_buf[3] = ne555_f / 10000;
 155   3                  else  smg_buf[3] = 10;
 156   3                  if(ne555_f > 999) smg_buf[4] = ne555_f / 1000 % 10;
 157   3                  else  smg_buf[4] = 10;
 158   3                  if(ne555_f > 99) smg_buf[5] = ne555_f / 100 % 10;
 159   3                  else  smg_buf[5] = 10;
 160   3                  smg_point[5] = 0;
 161   3                  if(ne555_f > 9) smg_buf[6] = ne555_f / 10 % 10;
 162   3                  else  smg_buf[6] = 10;
 163   3                  if(ne555_f > 0) smg_buf[7] = ne555_f % 10;
 164   3                  else  smg_buf[7] = 10;
 165   3              }
 166   2              else
 167   2              {
 168   3                  smg_buf[0] = 12;
 169   3                  smg_buf[3] = 10;
 170   3                  smg_buf[4] = 10;
 171   3                  smg_buf[5] = da * 100 / 51 / 100;
 172   3                  smg_point[5] = 1;
 173   3                  smg_buf[6] = da * 100 / 51 / 10 % 10;
 174   3                  smg_buf[7] = da * 100 / 51 % 10;  
 175   3              }
 176   2          }
 177   1          else
 178   1          {
C51 COMPILER V9.60.0.0   MIAN                                                              03/29/2023 10:32:11 PAGE 4   

 179   2              smg_buf[0] = 10;
 180   2              smg_buf[4] = 10;
 181   2              smg_buf[5] = 10;
 182   2              smg_point[5] = 0;
 183   2              smg_buf[6] = 10;
 184   2              smg_buf[7] = 10;
 185   2          } 
 186   1      }
 187          void led_proc()
 188          {
 189   1          if(!led_mode)
 190   1          {
 191   2              if(!smg_mode)
 192   2              {
 193   3                  led_buf[0] = 1;
 194   3                  led_buf[1] = 0;
 195   3              }
 196   2              else
 197   2              {
 198   3                  led_buf[0] = 0;
 199   3                  led_buf[1] = 1;
 200   3              }
 201   2              if(da < 76.5) led_buf[2] = 0;
 202   2              else if(da < 127.5) led_buf[2] = 1;
 203   2              else if(da < 178.5) led_buf[2] = 0;
 204   2              else led_buf[2] = 1;
 205   2      
 206   2              if(ne555_f < 1000) led_buf[3] = 0;
 207   2              else if(ne555_f <5000) led_buf[3] = 1;
 208   2              else if(ne555_f < 10000) led_buf[3] = 0;
 209   2              else led_buf[3] = 1;
 210   2      
 211   2              if(!dac_mode) led_buf[4] = 0;
 212   2              else led_buf[4] = 1;
 213   2          }
 214   1          else 
 215   1          {
 216   2              led_buf[0] = 0;
 217   2              led_buf[1] = 0;
 218   2              led_buf[2] = 0;
 219   2              led_buf[3] = 0;
 220   2              led_buf[4] = 0;
 221   2              led_buf[5] = 0;
 222   2              led_buf[6] = 0;
 223   2              led_buf[7] = 0;
 224   2          }
 225   1      }
 226          void other_proc()
 227          {
 228   1          
 229   1      
 230   1          if(!dac_mode) 
 231   1          {
 232   2              da = 102;
 233   2              da_write(102);
 234   2              
 235   2          }
 236   1          else 
 237   1          {
 238   2              da_write(da);
 239   2              da = ad_read();
 240   2          }
C51 COMPILER V9.60.0.0   MIAN                                                              03/29/2023 10:32:11 PAGE 5   

 241   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    821    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     37    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
